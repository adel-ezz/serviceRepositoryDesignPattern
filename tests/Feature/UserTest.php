<?php

namespace Tests\Feature;

use App\Models\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class UserTest extends TestCase
{
    use DatabaseTransactions;

    protected $user;
    protected $email = 'firstTest@gmail.com';
    protected $password = 12345678;

    function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::firstOrCreate(['email' => $this->email], [
            'email' => $this->email,
            'name' => 'first',
            'password' => bcrypt($this->password),
        ]);
    }


    /**
     * A use login test with wrong data.
     *
     * @return void
     */
    public function testUserLoginWithWrongData()
    {
        $body = [
            'email' => $this->email,
            'password' => $this->password . 'false',
        ];
        $response = $this->json('POST', '/api/login', $body, ['Accept' => 'application/json'])
            ->assertStatus(422);
    }

    /**
     * A use login test with missing data.
     *
     * @return void
     */
    public function testUserLoginWithMissedData()
    {
        $body = [
            'email' => $this->email,
        ];
        $response = $this->json('POST', '/api/login', $body, ['Accept' => 'application/json'])
            ->assertStatus(403);
    }

    /**
     * A use login test with success.
     *
     * @return void
     */
    public function testUserLoginSuccess()
    {
        $body = [
            'email' => $this->email,
            'password' => $this->password,
        ];
        $response = $this->json('POST', '/api/login', $body, ['Accept' => 'application/json'])
            ->assertStatus(200);
    }


}
